Index: DataSourcesModule/src/main/java/mariusz/ambroziak/kassistant/hibernate/dao/ProductDAOImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mariusz.ambroziak.kassistant.hibernate.dao;\n\nimport java.util.List;\n\nimport javax.persistence.EntityManager;\n\nimport org.hibernate.Session;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport mariusz.ambroziak.kassistant.hibernate.model.ProductData;\nimport mariusz.ambroziak.kassistant.webclients.tesco.Tesco_Product;\n\n\n@Component\npublic class ProductDAOImpl implements ProductDAO {\n\t\n\t\n    @Autowired\n    private EntityManager entityManager;\n\n    private Session getSession() {\n        return entityManager.unwrap(Session.class);\n    }\n\t\n\t\n\n\t@Override\n\tpublic List<ProductData> list() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<ProductData> listProdukt = (List<ProductData>) getSession()\n\t\t\t\t.createCriteria(ProductData.class)\n\t\t\t\t.list();\n\n\t\treturn listProdukt;\n\t}\n//\n//\t@Override\n//\tpublic List<ProductData> getProduktsById(String id) {\n//\t\t// TODO Auto-generated method stub\n//\t\treturn null;\n//\t}\n//\n\t@Override\n\tpublic void saveProduct(ProductData produkt) {\n\t\tif(produkt!=null){\n\t\t\tif(produkt instanceof Tesco_Product) {\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tthis.getSession().save(produkt);\n\t\t}else{\n\t\t\tSystem.err.println(\"Problem przy zapisywaniu danych produktu\");\n\t\t}\n\t\t\n\t}\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- DataSourcesModule/src/main/java/mariusz/ambroziak/kassistant/hibernate/dao/ProductDAOImpl.java	(revision 61bc9730c7f6f7136d12d0de3b942a87182360be)
+++ DataSourcesModule/src/main/java/mariusz/ambroziak/kassistant/hibernate/dao/ProductDAOImpl.java	(date 1586258784827)
@@ -3,6 +3,9 @@
 import java.util.List;
 
 import javax.persistence.EntityManager;
+import javax.persistence.TypedQuery;
+import javax.persistence.criteria.CriteriaBuilder;
+import javax.persistence.criteria.CriteriaQuery;
 
 import org.hibernate.Session;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -27,27 +30,53 @@
 
 	@Override
 	public List<ProductData> list() {
-		@SuppressWarnings("unchecked")
-		List<ProductData> listProdukt = (List<ProductData>) getSession()
-				.createCriteria(ProductData.class)
-				.list();
+//		@SuppressWarnings("unchecked")
+//		List<ProductData> listProdukt = (List<ProductData>) getSession()
+//				.createCriteria(ProductData.class)
+//				.list();
+//		builder.createQuery(ProductData.class).where();
+		// Create CriteriaBuilder
+		CriteriaBuilder builder = getSession()	.getCriteriaBuilder();
+
+		// Create CriteriaQuery
+		CriteriaQuery<ProductData> criteria = builder.createQuery(ProductData.class);
 
-		return listProdukt;
+		TypedQuery<ProductData> query =  getSession().createQuery(criteria);
+		return query.getResultList();
 	}
+//	public List<MyObject> listAllForIds(List<Long> ids) {
 //
-//	@Override
-//	public List<ProductData> getProduktsById(String id) {
-//		// TODO Auto-generated method stub
-//		return null;
-//	}
+//		CriteriaBuilder builder = getSessionFactory().getCurrentSession().getCriteriaBuilder();
+//		CriteriaQuery<MyObject> criteria = builder.createQuery(MyObject.class);
+//		Root<MyObject> myObjectRoot = criteria.from(MyObject.class);
+//		Join<MyObject, JoinObject> joinObject = myObjectRoot.join("joinObject");
+//
+//		Predicate likeRestriction = builder.and(
+//				builder.notLike( myObjectRoot.get("name"), "%string1"),
+//				builder.notLike( myObjectRoot.get("name"), "%string2")
+//		);
+//
+//		criteria.select(myObjectRoot).where(joinObject.get("id").in(ids), likeRestriction);
+//
+//		TypedQuery<MyObject> query = getSessionFactory().getCurrentSession().createQuery(criteria);
 //
+//		return query.getResultList();
+//	}
+	@Override
+	public List<ProductData> getProduktsById(String id) {
+		return null;
+	}
+
+	@Override
+	public List<ProductData> getProduktsByFullUrl(String url) {
+		return null;
+	}
+
+
 	@Override
 	public void saveProduct(ProductData produkt) {
 		if(produkt!=null){
-			if(produkt instanceof Tesco_Product) {
-				
-			}
-			
+
 			this.getSession().save(produkt);
 		}else{
 			System.err.println("Problem przy zapisywaniu danych produktu");
